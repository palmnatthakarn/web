#!/usr/bin/env dart
// Component Checker - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Component ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
// Run: dart lib/scripts/check_components.dart

import 'dart:io';

void main() {
  print('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö BLoC ‡πÅ‡∏•‡∏∞ Components...\n');

  checkBlocs();
  checkComponents();
  checkWidgets();
  checkScreens();

  print('\n‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
  print('üìö ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:');
  print('   - lib/ARCHITECTURE.md');
  print('   - lib/QUICK_REFERENCE.md');
  print('   - lib/README_ORGANIZATION.md');
}

void checkBlocs() {
  print('üì¶ BLoCs:');
  final blocDir = Directory('lib/blocs');

  if (!blocDir.existsSync()) {
    print('   ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå blocs/');
    return;
  }

  final dirs = blocDir
      .listSync()
      .whereType<Directory>()
      .map((d) => d.path.split(Platform.pathSeparator).last)
      .where((name) => !name.startsWith('.'))
      .toList();

  for (var dir in dirs) {
    print('   ‚úì $dir/');
  }

  // Check barrel file
  final barrelFile = File('lib/blocs/blocs.dart');
  if (barrelFile.existsSync()) {
    print('   ‚úì blocs.dart (Barrel File) ‚ú®');
  } else {
    print('   ‚ö†Ô∏è  blocs.dart ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Barrel File');
  }
  print('');
}

void checkComponents() {
  print('üß© Components:');
  final componentDir = Directory('lib/component/all');

  if (!componentDir.existsSync()) {
    print('   ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå component/all/');
    return;
  }

  final files = componentDir
      .listSync()
      .whereType<File>()
      .where((f) => f.path.endsWith('.dart'))
      .map((f) => f.path.split(Platform.pathSeparator).last)
      .toList();

  for (var file in files) {
    if (file == 'README.md') continue;
    print('   ‚úì $file');
  }

  // Check barrel file
  final barrelFile = File('lib/component/components.dart');
  if (barrelFile.existsSync()) {
    print('   ‚úì components.dart (Barrel File) ‚ú®');
  } else {
    print('   ‚ö†Ô∏è  components.dart ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Barrel File');
  }
  print('');
}

void checkWidgets() {
  print('üé® Custom Widgets:');
  final widgetDir = Directory('lib/widgets');

  if (!widgetDir.existsSync()) {
    print('   ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå widgets/');
    return;
  }

  final files = widgetDir
      .listSync()
      .whereType<File>()
      .where(
          (f) => f.path.endsWith('.dart') && !f.path.endsWith('widgets.dart'))
      .map((f) => f.path.split(Platform.pathSeparator).last)
      .toList();

  for (var file in files) {
    print('   ‚úì $file');
  }

  // Check barrel file
  final barrelFile = File('lib/widgets/widgets.dart');
  if (barrelFile.existsSync()) {
    print('   ‚úì widgets.dart (Barrel File) ‚ú®');
  } else {
    print('   ‚ö†Ô∏è  widgets.dart ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Barrel File');
  }
  print('');
}

void checkScreens() {
  print('üì± Screen Widgets:');
  final screenDir = Directory('lib/screens/main/widgets_main');

  if (!screenDir.existsSync()) {
    print('   ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå screens/main/widgets_main/');
    return;
  }

  final files = screenDir
      .listSync()
      .whereType<File>()
      .where((f) =>
          f.path.endsWith('.dart') && !f.path.endsWith('widgets_main.dart'))
      .map((f) => f.path.split(Platform.pathSeparator).last)
      .toList();

  for (var file in files) {
    print('   ‚úì $file');
  }

  // Check barrel file
  final barrelFile = File('lib/screens/main/widgets_main/widgets_main.dart');
  if (barrelFile.existsSync()) {
    print('   ‚úì widgets_main.dart (Barrel File) ‚ú®');
  } else {
    print('   ‚ö†Ô∏è  widgets_main.dart ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Barrel File');
  }
}
